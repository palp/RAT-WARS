name: Export
on:
  push:
    branches:
      - main
    tags:
      - v*
  workflow_dispatch:
    inputs:
      push:
        description: 'Push to palp.itch.io'
        required: false
        default: true
        type: boolean
      play:
        description: 'Push to Google Play'
        required: false
        default: false
        type: boolean

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-20.04
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        if: ${{ github.ref_type == 'tag' && startsWith(github.ref, 'refs/tags/v') }}
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: false
          prerelease: false
  export-macos:
    needs: create-release
    name: Export macos
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          lfs: true
      - name: Install the Apple certificate
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.APPLE_DEV_ID_CERT_BASE64 }}
          P12_PASSWORD: ${{ secrets.APPLE_DEV_ID_P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
      - name: "Download and Install Godot 4.3"
        continue-on-error: true
        shell: bash
        run: |
          GODOT_VERSION=4.3
          wget https://raw.githubusercontent.com/Homebrew/homebrew-cask/83c65eee142d41cbef5de9b2026a33a353819ffe/Casks/g/godot.rb
          brew install --HEAD -s godot.rb
      - name: "Download Export Templates"
        run: |
          GODOT_VERSION=4.3
          mkdir -v -p "/Users/runner/Library/Application Support/Godot/export_templates"
          GODOT_TEMPLATES_PACKAGE=Godot_v$GODOT_VERSION-stable_export_templates.tpz          
          wget -q https://github.com/godotengine/godot/releases/download/$GODOT_VERSION-stable/$GODOT_TEMPLATES_PACKAGE -P ${{ runner.temp }}
          unzip ${{ runner.temp }}/$GODOT_TEMPLATES_PACKAGE -d "/Users/runner/Library/Application Support/Godot/export_templates"
          mv "/Users/runner/Library/Application Support/Godot/export_templates/templates" "/Users/runner/Library/Application Support/Godot/export_templates/$GODOT_VERSION.stable"
      - name: "Update Project"
        if: ${{ !cancelled() }}
        timeout-minutes: 1
        continue-on-error: true # we still ignore the timeout, the script is not quit and we run into a timeout
        shell: bash
        run: |
          godot -e --path . -s res://addons/gdUnit4/bin/ProjectScanner.gd --headless --audio-driver Dummy
      - name: Install release presets
        run: |
          rm export_presets.cfg
          mv release_presets.cfg export_presets.cfg          
      - name: Configure Notarization
        if: ${{ !cancelled() }}
        env: 
          APPSTORE_KEY: ${{secrets.APPSTORE_API_PRIVATE_KEY}}
        run: |
          brew install gnu-sed
          PATH="/usr/local/opt/gnu-sed/libexec/gnubin:$PATH"
          echo -n "$APPSTORE_KEY" >$RUNNER_TEMP/appstore.p8
          gsed 's@notarization/api_uuid=".*"@notarization/api_uuid="'${{ secrets.APPSTORE_ISSUER_ID }}'"@g' -i export_presets.cfg
          gsed 's@notarization/api_key=".*"@notarization/api_key="'$RUNNER_TEMP/appstore.p8'"@g' -i export_presets.cfg
          gsed 's@notarization/api_key_id=".*"@notarization/api_key_id="'${{ secrets.APPSTORE_API_KEY_ID }}'"@g' -i export_presets.cfg
      - name: Install production config
        if: ${{ success() }}
        run: |
          echo -n "${{ secrets.PROD_CONFIG_BASE64 }}" | base64 --decode -o ratwars.cfg.prod
          echo -n "${{ secrets.CONFIG_KEY_BASE64 }}" | base64 --decode -o config.key
      - name: Build
        if: ${{ success() }}
        timeout-minutes: 10
        continue-on-error: true
        run: |
          mkdir -v -p build/macos
          godot -v --headless --audio-driver Dummy --export-release "macos" "build/macos/ratwars-macos.zip" --quit-after 5
      - name: Check build
        if: ${{ !cancelled() }}
        run: |
          if [ ! -f "build/macos/ratwars-macos.zip" ]; then
            echo "Build failed"
            exit 1
          fi
      - name: Publish Artifact
        if: ${{ success() }}
        uses: actions/upload-artifact@v4
        with:
          name: ratwars-macos
          path: build/macos/ratwars-macos.zip
      - name: Upload Release Asset
        if: ${{ github.ref_type == 'tag' && startsWith(github.ref, 'refs/tags/v') && success() }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: build/macos/ratwars-macos.zip
          asset_name: ratwars-macos.zip
          asset_content_type: application/octet-stream
      - name: Set up butler
        uses: remarkablegames/setup-butler@v1          
      - name: Push to healthnoise.itch.io
        if: ${{ github.ref_type == 'tag' && startsWith(github.ref, 'refs/tags/v') && success() }}
        run: butler push build/macos/ratwars-macos.zip healthnoise/ratwars:macos --userversion ${{github.ref_name}}
        env:
          BUTLER_API_KEY: ${{ secrets.BUTLER_API_KEY }}
      - name: Push to palp.itch.io
        if: ${{ !(github.ref_type == 'tag' && startsWith(github.ref, 'refs/tags/v')) && success() }}
        run: butler push build/macos/ratwars-macos.zip palp/rat-wars:macos --userversion ${{github.sha}}
        env:
          BUTLER_API_KEY: ${{ secrets.BUTLER_API_KEY }}

  export-matrix:
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        build:
          - preset: web
            path: build/web
            output: build/web/index.html
            tag: web            
          - preset: linux
            path: build/linux
            output: build/linux/RatWars.x86_64
            tag: linux
          - preset: win
            path: build/win
            output: build/win/RatWars.exe
            tag: win
          - preset: android
            path: build/android
            output: build/android/RatWars.apk
            tag: android
    name: Export ${{matrix.build.preset}}
    runs-on: ubuntu-20.04
    container:
      image: barichello/godot-ci:4.3
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          lfs: true

      - name: Setup
        run: |
          mkdir -v -p ~/.local/share/godot/export_templates
          mv /root/.local/share/godot/export_templates/4.3.stable ~/.local/share/godot/export_templates/4.3.stable
          
      - name: "Update Project"
        if: ${{ !cancelled() }}
        timeout-minutes: 1
        continue-on-error: true # we still ignore the timeout, the script is not quit and we run into a timeout
        shell: bash
        run: |
          godot --headless --audio-driver Dummy --import --editor --quit-after 2  

      - name: Install release presets
        run: |
          rm export_presets.cfg
          mv release_presets.cfg export_presets.cfg       

      - name: Setup (Android)
        if: ${{matrix.build.preset == 'android'}}
        run: |          
          apt update && apt install openjdk-17-jdk-headless -yy && apt remove -yy openjdk-11-jre-headless                  
          echo ${{ secrets.ANDROID_RELEASE_KEYSTORE_BASE64 }} | base64 --decode > /root/release.keystore
          sed 's@keystore/release=".*"@keystore/release="'/root/release.keystore'"@g' -i export_presets.cfg
          sed 's@keystore/release_user=".*"@keystore/release_user="'${{ secrets.ANDROID_RELEASE_KEYSTORE_USER }}'"@g' -i export_presets.cfg
          sed 's@keystore/release_password=".*"@keystore/release_password="'${{ secrets.ANDROID_RELEASE_KEYSTORE_PASSWORD }}'"@g' -i export_presets.cfg
          sed 's|export/android/android_sdk_path = ".*"|export/android/android_sdk_path = "'/usr/lib/android-sdk'"|g' -i /root/.config/godot/editor_settings-4.3.tres
          mkdir -v -p ~/.config/godot
          cp -v /root/.config/godot/editor_settings-4.3.tres ~/.config/godot/

      - name: Setup (Windows)
        if: ${{matrix.build.preset == 'win' }}
        run: |
          mkdir -v -p ~/.config/
          mv /root/.config/godot ~/.config/godot

      - name: Install production config
        if: ${{ !cancelled() && github.ref_type == 'tag' && startsWith(github.ref, 'refs/tags/v') }}
        run: |
          echo -n "${{ secrets.PROD_CONFIG_BASE64 }}" | base64 --decode >ratwars.cfg.prod
          echo -n "${{ secrets.CONFIG_KEY_BASE64 }}" | base64 --decode >config.key
          cp ratwars.prod.cfg ratwars.cfg       

      - name: Build
        if: ${{ !cancelled() }}
        timeout-minutes: 10
        continue-on-error: true
        run: |        
          mkdir -v -p ${{matrix.build.path}}
          godot -v --headless --audio-driver Dummy --export-release "${{matrix.build.preset}}" "${{matrix.build.output}}" --quit-after 5

      # - name: Build (Android Play Store)        
      #   timeout-minutes: 10
      #   if: ${{ matrix.build.preset == 'android' }}
      #   shell: bash         
      #   continue-on-error: true
      #   run: |                       
      #     mkdir -v -p build/android-aab          
      #     sed 's@gradle_build/export_format=.*@gradle_build/export_format=1@g' -i export_presets.cfg          
      #     godot -v --headless --audio-driver Dummy --export-release "${{matrix.build.preset}}" "build/android-aab/RatWars.aab" --quit-after 5
      #     if [ ! -f "build/android-aab/RatWars.aab" ]; then
      #       echo "Build failed"
      #       exit 1
      #     fi

      - name: Check build
        if: ${{ !cancelled() }}
        run: |
          if [ ! -f "${{matrix.build.output}}" ]; then
            echo "Build failed"
            ls -laR ./build
            exit 1
          fi

      - name: Zip
        if: ${{ success() }}
        run: |        
          cd ${{matrix.build.path}}
          zip -r ../ratwars-${{matrix.build.tag}}.zip .

      - name: Publish Artifact
        if: ${{ success() }}
        uses: actions/upload-artifact@v4
        with:
          name: ratwars-${{matrix.build.tag}}
          path: ${{matrix.build.path}}

      # - name: Publish Artifact (Android Play Store)
      #   if: ${{ success() && matrix.build.preset == 'android' }}
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: ratwars-${{matrix.build.tag}}-aab
      #     path: build/android-aab/RatWars.aab

      - name: Upload Release Asset
        if: ${{ github.ref_type == 'tag' && startsWith(github.ref, 'refs/tags/v') && success() }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: build/ratwars-${{matrix.build.tag}}.zip
          asset_name: ratwars-${{matrix.build.tag}}.zip
          asset_content_type: application/octet-stream

      - name: Push to healthnoise.itch.io (${{matrix.build.tag}})
        if: ${{ github.ref_type == 'tag' && startsWith(github.ref, 'refs/tags/v') && success() }}
        run: butler push ${{matrix.build.path}} healthnoise/ratwars:${{matrix.build.tag}} --userversion ${{github.ref_name}}
        env:
          BUTLER_API_KEY: ${{ secrets.BUTLER_API_KEY }}

      - name: Determine userversion
        id: userversion
        run: |
          if [[ "${{github.ref_type}}" == "tag" ]]; then
            echo "userversion=${{github.ref_name}}-${{github.sha}}" >> $GITHUB_OUTPUT
          else
            echo "userversion=${{github.ref_name}}-${{github.sha}}" >> $GITHUB_OUTPUT
          fi

      - name: Push to palp.itch.io (${{matrix.build.tag}})
        if: ${{ success() && (github.ref_name == 'main' || (github.event_name == 'workflow_dispatch' && inputs.push)) }}
        run: butler push ${{matrix.build.path}} palp/rat-wars:${{matrix.build.tag}} --userversion ${{steps.userversion.outputs.userversion}}
        env:
          BUTLER_API_KEY: ${{ secrets.BUTLER_API_KEY }}

      - name: Determine release track
        id: release-track        
        if: ${{ success() && matrix.build.preset == 'android' }}
        run: |
          if [[ "${{github.ref_type}}" == "tag" ]]; then
            echo "ref=$GITHUB_REF" >> $GITHUB_OUTPUT
            if [[ "${{github.ref_name}}" == *"alpha"* ]]; then
              echo "track=alpha" >> $GITHUB_OUTPUT              
            elif [[ "${{github.ref_name}}" == *"beta"* ]]; then
              echo "track=beta" >> $GITHUB_OUTPUT              
            else
              echo "track=production" >> $GITHUB_OUTPUT                          
            fi          
          elif [[ "${{github.ref_name}}" == "main" ]]; then
            echo "track=internal" >> $GITHUB_OUTPUT
            echo "ref=$GITHUB_SHA" >> $GITHUB_OUTPUT
          else
            echo "track=internal" >> $GITHUB_OUTPUT
            echo "ref=${{github.ref_name}}" >> $GITHUB_OUTPUT
          fi
  
      - name: Push to Google Play
        if: ${{ success() && matrix.build.preset == 'android' && ((github.ref_type == 'tag' && startsWith(github.ref, 'refs/tags/v')) || (github.event_name == 'workflow_dispatch' && inputs.play)) }}
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}
          packageName: com.youwillloveeachother.ratwars
          releaseFiles: build/android-aab/RatWars.aab
          track: internal #${{ steps.release-track.outputs.track }}
          releaseName: ${{ github.ref_name }}
