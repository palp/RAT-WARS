name: Export iOS
on:
  push:

jobs:
  export-ios:
    name: Export iOS
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          lfs: true
      # - name: Install the Apple certificate and provisioning profile
      #   env:
      #     BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
      #     P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
      #     BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
      #     KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      #   run: |
      #     # create variables
      #     CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
      #     PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
      #     KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

      #     # import certificate and provisioning profile from secrets
      #     echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
      #     echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

      #     # create temporary keychain
      #     security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
      #     security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
      #     security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

      #     # import certificate to keychain
      #     security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
      #     security list-keychain -d user -s $KEYCHAIN_PATH

      #     # apply provisioning profile
      #     mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
      #     cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
      - name: "Download and Install Godot 4.1.3"
        continue-on-error: false
        shell: bash
        run: |
          # GODOT_HOME=$HOME/bin
          # GODOT_BIN=$GODOT_HOME/godot
          # mkdir -p $GODOT_HOME
          # chmod 770 $GODOT_HOME
          # GODOT_CONF_PATH=$HOME/.config/godot
          # if [ ! -d $GODOT_CONF_PATH ]; then
          #   mkdir -p $GODOT_CONF_PATH
          #   chmod 770 $GODOT_CONF_PATH
          # fi

          GODOT_VERSION=4.1.3
          # GODOT_PACKAGE=Godot_v$GODOT_VERSION-stable_macos.universal
          # wget https://github.com/godotengine/godot/releases/download/$GODOT_VERSION-stable/$GODOT_PACKAGE.zip -P ${{ runner.temp }}
          # unzip ${{ runner.temp }}/$GODOT_PACKAGE.zip -d $GODOT_HOME
          # mv $GODOT_HOME/$GODOT_PACKAGE $GODOT_BIN
          # chmod u+x $GODOT_BIN
          # echo "GODOT_HOME=$GODOT_HOME" >> "$GITHUB_ENV"
          # echo "GODOT_BIN=$GODOT_BIN" >> "$GITHUB_ENV"

          brew install --cask https://raw.githubusercontent.com/Homebrew/homebrew-cask/4ed2983b312044fd39cd3d321dbadc30bef78e1e/Casks/g/godot.rb

          mkdir -v -p ~/.local/share/godot/export_templates
          GODOT_TEMPLATES_PACKAGE=Godot_v$GODOT_VERSION-stable_export_templates.tpz
          wget https://github.com/godotengine/godot/releases/download/$GODOT_VERSION-stable/$GODOT_TEMPLATES_PACKAGE -P ${{ runner.temp }}
          unzip ${{ runner.temp }}/$GODOT_TEMPLATES_PACKAGE -d ~/.local/share/godot/export_templates
      - name: "Update Project"
        if: ${{ !cancelled() }}
        timeout-minutes: 1
        continue-on-error: true # we still ignore the timeout, the script is not quit and we run into a timeout
        shell: bash
        run: |
          godot -e --path . -s res://addons/gdUnit4/bin/ProjectScanner.gd --headless --audio-driver Dummy
      - name: Build
        if: ${{ !cancelled() }}
        timeout-minutes: 10
        continue-on-error: true
        run: |
          mkdir -v -p build/ios
          godot -v --headless --audio-driver Dummy --export-release "ios" "build/ios/ratwars-ios.ipa"
